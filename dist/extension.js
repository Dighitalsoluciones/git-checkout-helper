(()=>{"use strict";var e={265:function(e,n,t){var o,a=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var a=Object.getOwnPropertyDescriptor(n,t);a&&!("get"in a?!n.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,a)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},o(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=o(e),i=0;i<t.length;i++)"default"!==t[i]&&a(n,e,t[i]);return r(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.activate=function(e){let n=c.commands.registerCommand("extension.generateGitCheckoutCommand",(async()=>{const n=c.window.createWebviewPanel("gitCheckoutHelper","Git Checkout Helper",c.ViewColumn.One,{enableScripts:!0,localResourceRoots:[c.Uri.file(e.extensionPath)]});n.webview.html="\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            body { padding: 20px; font-family: Arial; }\n            .container { max-width: 800px; margin: 0 auto; }\n            textarea {\n                width: 100%;\n                height: 150px;\n                margin: 10px 0;\n                font-family: monospace;\n            }\n            #result {\n                margin-top: 20px;\n                padding: 10px;\n                background:rgb(148, 226, 152);\n\t\t\t\tcolor: black;\n                word-break: break-all;\n                white-space: pre-wrap;\n                overflow-x: auto;\n                max-height: 200px;\n            }\n            button {\n                padding: 8px 16px;\n                background: #007acc;\n                color: white;\n                border: none;\n                cursor: pointer;\n                margin-top: 10px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h2>Generador de Comando Git Checkout</h2>\n            <label>Rama a copiar:</label>\n            <input type=\"text\" id=\"branch\" placeholder=\"nombre-de-la-rama\">\n            \n            <label>Salida de Git (modified/new file/etc):</label>\n            <textarea id=\"gitOutput\"></textarea>\n            \n            <button onclick=\"generateCommand()\">Generar Comando</button>\n            \n            <div id=\"resultContainer\" style=\"display: none;\">\n                <h3>Comando Resultante:</h3>\n                <pre id=\"result\"></pre>\n                <button onclick=\"copyCommand()\">Copiar al Portapapeles</button>\n            </div>\n        </div>\n        \n        <script>\n            const vscode = acquireVsCodeApi();\n            \n            function generateCommand() {\n                const branch = document.getElementById('branch').value;\n                const gitOutput = document.getElementById('gitOutput').value;\n                \n                vscode.postMessage({\n                    command: 'generate',\n                    data: { branch, gitOutput }\n                });\n            }\n            \n            window.addEventListener('message', event => {\n                const { command, data } = event.data;\n                if (command === 'result') {\n                    document.getElementById('result').textContent = data;\n                    document.getElementById('resultContainer').style.display = 'block';\n                }\n            });\n            \nfunction copyCommand() {\n    const command = document.getElementById('result').textContent;\n    navigator.clipboard.writeText(command)\n        .then(() => {\n            // Usa la API de VS Code para mostrar notificaciones\n            vscode.postMessage({ command: 'showMessage', data: '¡Comando copiado!' });\n        })\n        .catch(err => console.error('Error al copiar:', err));\n}\n        <\/script>\n    </body>\n    </html>\n    ",n.webview.onDidReceiveMessage((async e=>{if("generate"===e.command){const{branch:t,gitOutput:o}=e.data,a=function(e){const n=e.split("\n"),t=[],o=/^\s*(?:modified|new file|deleted|renamed):\s*(.*)$/i;for(const e of n){const n=e.match(o);if(n){const e=n[1].trim();e&&t.push(e)}}return t}(o);if(0===a.length)return void c.window.showErrorMessage("No se encontraron archivos válidos");const r=`git checkout ${t} -- ${a.map((e=>e.includes(" ")?`'${e}'`:e)).join(" ")}`;n.webview.postMessage({command:"result",data:r})}else"showMessage"===e.command&&c.window.showInformationMessage(e.data)}))}));e.subscriptions.push(n)};const c=i(t(398))},398:e=>{e.exports=require("vscode")}},n={},t=function t(o){var a=n[o];if(void 0!==a)return a.exports;var r=n[o]={exports:{}};return e[o].call(r.exports,r,r.exports,t),r.exports}(265);module.exports=t})();