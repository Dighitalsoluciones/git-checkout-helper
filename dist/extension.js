(()=>{"use strict";var t={265:function(t,e,n){var o,a=this&&this.__createBinding||(Object.create?function(t,e,n,o){void 0===o&&(o=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,o,a)}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]}),r=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||(o=function(t){return o=Object.getOwnPropertyNames||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[e.length]=n);return e},o(t)},function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n=o(t),i=0;i<n.length;i++)"default"!==n[i]&&a(e,t,n[i]);return r(e,t),e});Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(t){let e=s.commands.registerCommand("extension.generateGitCheckoutCommand",(async()=>{const e=s.window.createWebviewPanel("gitCheckoutHelper","Git Checkout Helper",s.ViewColumn.One,{enableScripts:!0,localResourceRoots:[s.Uri.file(t.extensionPath)]});e.webview.html="\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            body { padding: 20px; font-family: Arial; }\n            .container { max-width: 800px; margin: 0 auto; }\n            textarea {\n                width: 100%;\n                height: 150px;\n                margin: 10px 0;\n                font-family: monospace;\n            }\n            #result {\n                margin-top: 20px;\n                padding: 10px;\n                background:rgb(148, 226, 152);\n\t\t\t\tcolor: black;\n                word-break: break-all;\n                white-space: pre-wrap;\n                overflow-x: auto;\n                max-height: 200px;\n            }\n            button {\n                padding: 8px 16px;\n                background: #007acc;\n                color: white;\n                border: none;\n                cursor: pointer;\n                margin-top: 10px;\n            }\n            .history-section { margin-top: 30px; border-top: 1px solid #ccc; padding-top: 20px; }\n            .history-input { margin: 10px 0; }\n            .history-output { \n            height: 150px;\n            background:rgb(83, 186, 204);\n\t\t    color: black;\n                 }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h2>Generador de Comando Git Checkout</h2>\n            <label>Rama a copiar:</label>\n            <input type=\"text\" id=\"branch\" placeholder=\"nombre-de-la-rama\">\n            \n            <label>Salida de Git (modified/new file/etc):</label>\n            <textarea id=\"gitOutput\"></textarea>\n            \n            <button onclick=\"generateCommand()\">Generar Comando</button>\n            \n            <div id=\"resultContainer\" style=\"display: none;\">\n                <h3>Comando Resultante:</h3>\n                <pre id=\"result\"></pre>\n                <button onclick=\"copyCommand()\">Copiar al Portapapeles</button>\n            </div>\n        </div>\n\n        <div class=\"history-section\">\n            <h3>Generar Historial de Cambios</h3>\n            <input type=\"text\" id=\"commitMessage\" class=\"history-input\" placeholder=\"COMMIT: \">\n            <select id=\"changeType\" class=\"history-input\">\n                <option value=\"FRONTEND\">FRONTEND</option>\n                <option value=\"BACKEND\">BACKEND</option>\n                <option value=\"OTRO\">OTRO</option>\n            </select>\n            <button onclick=\"generateHistory()\">Generar Historial</button>\n            \n            <textarea id=\"historyOutput\" class=\"history-output\"></textarea>\n            <button onclick=\"copyHistory()\">Copiar Historial</button>\n        </div>\n        \n        <script>\n            const vscode = acquireVsCodeApi();\n            \n            function generateCommand() {\n                const branch = document.getElementById('branch').value;\n                const gitOutput = document.getElementById('gitOutput').value;\n                \n                vscode.postMessage({\n                    command: 'generate',\n                    data: { branch, gitOutput }\n                });\n            }\n            \n            window.addEventListener('message', event => {\n                const { command, data } = event.data;\n                if (command === 'result') {\n                    document.getElementById('result').textContent = data;\n                    document.getElementById('resultContainer').style.display = 'block';\n                }\n            });\n            \nfunction copyCommand() {\n    const command = document.getElementById('result').textContent;\n    navigator.clipboard.writeText(command)\n        .then(() => {\n            // Usa la API de VS Code para mostrar notificaciones\n            vscode.postMessage({ command: 'showMessage', data: '¡Comando copiado!' });\n        })\n        .catch(err => console.error('Error al copiar:', err));\n}\n        function generateHistory() {\n                const commit = document.getElementById('commitMessage').value;\n                const type = document.getElementById('changeType').value;\n                const files = document.getElementById('gitOutput').value.split('\\n').filter(l => l.trim());\n                \n                const date = new Date();\n                const formattedDate = `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth()+1).toString().padStart(2, '0')}/${date.getFullYear().toString().slice(-2)} ${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')} HS`;\n                \n                let output = `${type}: ${formattedDate}\\nCOMMIT: ${commit}\\n`;\n                files.forEach(line => output += `        ${line.trim()}\\n`);\n                output += '\\n-------------------------------------------------------------------------------------------------------------------------';\n                \n                document.getElementById('historyOutput').value = output;\n            }\n\n            function copyHistory() {\n                const text = document.getElementById('historyOutput').value;\n                navigator.clipboard.writeText(text)\n                    .then(() => vscode.postMessage({ command: 'showMessage', data: '¡Historial copiado!' }))\n                    .catch(err => console.error(err));\n            }\n        <\/script>\n    </body>\n    </html>\n    ",e.webview.onDidReceiveMessage((async t=>{if("generate"===t.command){const{branch:n,gitOutput:o}=t.data,a=function(t){const e=t.split("\n"),n=[],o=/^\s*(?:modified|new file|deleted|renamed):\s*(.*)$/i;for(const t of e){const e=t.match(o);if(e){const t=e[1].trim();t&&n.push(t)}}return n}(o);if(0===a.length)return void s.window.showErrorMessage("No se encontraron archivos válidos");const r=`git checkout ${n} -- ${a.map((t=>t.includes(" ")?`'${t}'`:t)).join(" ")}`;e.webview.postMessage({command:"result",data:r})}else"showMessage"===t.command&&s.window.showInformationMessage(t.data)}))}));t.subscriptions.push(e)};const s=i(n(398))},398:t=>{t.exports=require("vscode")}},e={},n=function n(o){var a=e[o];if(void 0!==a)return a.exports;var r=e[o]={exports:{}};return t[o].call(r.exports,r,r.exports,n),r.exports}(265);module.exports=n})();