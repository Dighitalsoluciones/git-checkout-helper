{"version":3,"file":"extension.js","mappings":"23BAIA,oBAAyBA,GACrB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,wCAAwCC,UACrF,MAAMC,EAAQJ,EAAOK,OAAOC,mBACxB,oBACA,sBACAN,EAAOO,WAAWC,IAClB,CACIC,eAAe,EACfC,mBAAoB,CAACV,EAAOW,IAAIC,KAAKd,EAAQe,kBAIrDT,EAAMU,QAAQC,KA6CX,kzKA5CHX,EAAMU,QAAQE,qBAAoBb,MAAMc,IACpC,GAAwB,aAApBA,EAAQC,QAAwB,CAChC,MAAM,OAAEC,EAAM,UAAEC,GAAcH,EAAQI,KAChCC,EAqBtB,SAAwBC,GACpB,MAAMC,EAAQD,EAAOE,MAAM,MACrBH,EAAkB,GAElBI,EAAQ,sDAEd,IAAK,MAAMC,KAAQH,EAAO,CACtB,MAAMI,EAAQD,EAAKC,MAAMF,GACzB,GAAIE,EAAO,CACP,MAAMC,EAAcD,EAAM,GAAGE,OACzBD,GACAP,EAAMS,KAAKF,EAEnB,CACJ,CAEA,OAAOP,CACX,CAtC8BU,CAAeZ,GAE7B,GAAqB,IAAjBE,EAAMW,OAEN,YADAjC,EAAOK,OAAO6B,iBAAiB,sCAKnC,MACMhB,EAAU,gBAAgBC,QADZG,EAAMa,KAAIC,GAAMA,EAAEC,SAAS,KAAO,IAAID,KAAOA,IACRE,KAAK,OAE9DlC,EAAMU,QAAQyB,YAAY,CAAErB,QAAS,SAAUG,KAAMH,GACzD,KAA+B,gBAApBD,EAAQC,SACflB,EAAOK,OAAOmC,uBAAuBvB,EAAQI,KACjD,GACF,IAGNvB,EAAQ2C,cAAcV,KAAKhC,EAC/B,EAvCA,iB,UCAA2C,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://git-checkout-helper/./src/extension.ts","webpack://git-checkout-helper/external commonjs \"vscode\"","webpack://git-checkout-helper/webpack/bootstrap","webpack://git-checkout-helper/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('extension.generateGitCheckoutCommand', async () => {\n        const panel = vscode.window.createWebviewPanel(\n            'gitCheckoutHelper',\n            'Git Checkout Helper',\n            vscode.ViewColumn.One,\n            {\n                enableScripts: true,\n                localResourceRoots: [vscode.Uri.file(context.extensionPath)]\n            }\n        );\n\n        panel.webview.html = getWebviewContent();\n        panel.webview.onDidReceiveMessage(async message => {\n            if (message.command === 'generate') {\n                const { branch, gitOutput } = message.data;\n                const paths = parseGitOutput(gitOutput);\n\n                if (paths.length === 0) {\n                    vscode.window.showErrorMessage('No se encontraron archivos válidos');\n                    return;\n                }\n\n\n                const quotedPaths = paths.map(p => (p.includes(' ') ? `'${p}'` : p));\n                const command = `git checkout ${branch} -- ${quotedPaths.join(' ')}`;\n\n                panel.webview.postMessage({ command: 'result', data: command });\n            } else if (message.command === 'showMessage') {\n                vscode.window.showInformationMessage(message.data);\n            }\n        });\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nfunction parseGitOutput(output: string): string[] {\n    const lines = output.split('\\n');\n    const paths: string[] = [];\n\n    const regex = /^\\s*(?:modified|new file|deleted|renamed):\\s*(.*)$/i;\n\n    for (const line of lines) {\n        const match = line.match(regex);\n        if (match) {\n            const cleanedPath = match[1].trim();\n            if (cleanedPath) {\n                paths.push(cleanedPath);\n            }\n        }\n    }\n\n    return paths;\n}\n\nfunction getWebviewContent() {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            body { padding: 20px; font-family: Arial; }\n            .container { max-width: 800px; margin: 0 auto; }\n            textarea {\n                width: 100%;\n                height: 150px;\n                margin: 10px 0;\n                font-family: monospace;\n            }\n            #result {\n                margin-top: 20px;\n                padding: 10px;\n                background:rgb(148, 226, 152);\n\t\t\t\tcolor: black;\n                word-break: break-all;\n                white-space: pre-wrap;\n                overflow-x: auto;\n                max-height: 200px;\n            }\n            button {\n                padding: 8px 16px;\n                background: #007acc;\n                color: white;\n                border: none;\n                cursor: pointer;\n                margin-top: 10px;\n            }\n            .history-section { margin-top: 30px; border-top: 1px solid #ccc; padding-top: 20px; }\n            .history-input { margin: 10px 0; }\n            .history-output { \n            height: 150px;\n            background:rgb(83, 186, 204);\n\t\t    color: black;\n                 }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h2>Generador de Comando Git Checkout</h2>\n            <label>Rama a copiar:</label>\n            <input type=\"text\" id=\"branch\" placeholder=\"nombre-de-la-rama\">\n            \n            <label>Salida de Git (modified/new file/etc):</label>\n            <textarea id=\"gitOutput\"></textarea>\n            \n            <button onclick=\"generateCommand()\">Generar Comando</button>\n            \n            <div id=\"resultContainer\" style=\"display: none;\">\n                <h3>Comando Resultante:</h3>\n                <pre id=\"result\"></pre>\n                <button onclick=\"copyCommand()\">Copiar al Portapapeles</button>\n            </div>\n        </div>\n\n        <div class=\"history-section\">\n            <h3>Generar Historial de Cambios</h3>\n            <input type=\"text\" id=\"commitMessage\" class=\"history-input\" placeholder=\"COMMIT: \">\n            <select id=\"changeType\" class=\"history-input\">\n                <option value=\"FRONTEND\">FRONTEND</option>\n                <option value=\"BACKEND\">BACKEND</option>\n                <option value=\"OTRO\">OTRO</option>\n            </select>\n            <button onclick=\"generateHistory()\">Generar Historial</button>\n            \n            <textarea id=\"historyOutput\" class=\"history-output\"></textarea>\n            <button onclick=\"copyHistory()\">Copiar Historial</button>\n        </div>\n        \n        <script>\n            const vscode = acquireVsCodeApi();\n            \n            function generateCommand() {\n                const branch = document.getElementById('branch').value;\n                const gitOutput = document.getElementById('gitOutput').value;\n                \n                vscode.postMessage({\n                    command: 'generate',\n                    data: { branch, gitOutput }\n                });\n            }\n            \n            window.addEventListener('message', event => {\n                const { command, data } = event.data;\n                if (command === 'result') {\n                    document.getElementById('result').textContent = data;\n                    document.getElementById('resultContainer').style.display = 'block';\n                }\n            });\n            \nfunction copyCommand() {\n    const command = document.getElementById('result').textContent;\n    navigator.clipboard.writeText(command)\n        .then(() => {\n            // Usa la API de VS Code para mostrar notificaciones\n            vscode.postMessage({ command: 'showMessage', data: '¡Comando copiado!' });\n        })\n        .catch(err => console.error('Error al copiar:', err));\n}\n        function generateHistory() {\n                const commit = document.getElementById('commitMessage').value;\n                const type = document.getElementById('changeType').value;\n                const files = document.getElementById('gitOutput').value.split('\\\\n').filter(l => l.trim());\n                \n                const date = new Date();\n                const formattedDate = \\`\\${date.getDate().toString().padStart(2, '0')}/\\${(date.getMonth()+1).toString().padStart(2, '0')}/\\${date.getFullYear().toString().slice(-2)} \\${date.getHours()}:\\${date.getMinutes().toString().padStart(2, '0')} HS\\`;\n                \n                let output = \\`\\${type}: \\${formattedDate}\\\\nCOMMIT: \\${commit}\\\\n\\`;\n                files.forEach(line => output += \\`        \\${line.trim()}\\\\n\\`);\n                output += '\\\\n-------------------------------------------------------------------------------------------------------------------------';\n                \n                document.getElementById('historyOutput').value = output;\n            }\n\n            function copyHistory() {\n                const text = document.getElementById('historyOutput').value;\n                navigator.clipboard.writeText(text)\n                    .then(() => vscode.postMessage({ command: 'showMessage', data: '¡Historial copiado!' }))\n                    .catch(err => console.error(err));\n            }\n        </script>\n    </body>\n    </html>\n    `;\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","disposable","vscode","commands","registerCommand","async","panel","window","createWebviewPanel","ViewColumn","One","enableScripts","localResourceRoots","Uri","file","extensionPath","webview","html","onDidReceiveMessage","message","command","branch","gitOutput","data","paths","output","lines","split","regex","line","match","cleanedPath","trim","push","parseGitOutput","length","showErrorMessage","map","p","includes","join","postMessage","showInformationMessage","subscriptions","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}